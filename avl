 clase Avl {

    PRINCIPAL (){
        // TODO code application logic here
        Tree tree = nuevo Tree();

        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 30);
        tree.root = tree.insert(tree.root, 40);
        tree.root = tree.insert(tree.root, 50);
   
        tree.root = tree.insert(tree.root, 25);
  
        
 
//             30
//            /  \
//          20   40
//         /  \     \
//        10  25    50
        
        //imprimir("post traversal of constructed tree is : ");
        tree.postOrder(tree.root);
    }
    
}

 clase Node {
    entero key;
    ENTERO height;
    Node left;
    Node right;
 
    publico Node(entero d) {
        key = d;
        height = 1;
    }
}

 clase Tree {
    entero cont = 0;
    Node root;
    // A utility function to get height of the tree
    entero height(Node N) {
        si (N == nada) Es_verdadero{
            caracter resultado [24] = "height Es_verdadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno 0;
        }
        Fin-Si
        retorno N.height;
    }

    // A utility function to get maximum of two integers
    entero max(entero a, entero b) {
        si(a > b) es_verdadero {
            caracter resultado [24] = "max Es_verdadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno a;
        }
        es_falso {
            caracter resultado [24] = "max falso";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno b;
        }
        fin-si
        //retorno (a > b) ? a : b;
    }
    // A utility function to right rotate subtree rooted with y
    // See the diagram given above.
    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;
        // Perform rotation
        x.right = y;
        y.left = T2;
        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;
        // retorno new root
        retorno x;
    }
    // A utility function to left rotate subtree rooted with x
    // See the diagram given above.
    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;
        // Perform rotation
        y.left = x;
        x.right = T2;
        //  Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;
        // retorno new root
        retorno y;
    }

    // Get Balance factor of node N
    entero getBalance(Node N) {
        si (N == nada) Es_verdadero {
            caracter resultado [24] = "getBalance vedadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno 0;
        }
        fin-si
        retorno height(N.left) - height(N.right);
    }

    Node insert(Node node, entero key) {
        si (node == nada) Es_verdadero {
            
             caracter resultado [24] = "insert vedadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
            Node nodeNew = nuevo Node(key);
                cont++;
            retorno nodeNew;
           
            //retorno nuevo Node(key);
        }
        fin-si
        si (key < node.key) Es_verdadero{
            caracter resultado [24] = "< vedadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            node.left = insert(node.left, key);
        } 
        es_falso {
            si (key > node.key) Es_verdadero{
            caracter resultado [24] = "> vedadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
                node.right = insert(node.right, key);
            } 
            es_falso // Duplicate keys not allowed
            {
            caracter resultado [24] = "> falso";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
                retorno node;
            }
            fin-si
        }
        fin-si
        // 2. Update height of this ancestor node 
        node.height = 1 + max(height(node.left),
                height(node.right));

        entero balance = getBalance(node);

        // si this node becomes unbalanced, then there
        // are 4 cases Left Left Case
        si (balance > 1 && key < node.left.key) Es_verdadero{
            caracter resultado [24] = "> Es_verdadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno rightRotate(node);
        }
        fin-si

        // Right Right Case
        si (balance < -1 && key > node.right.key) Es_verdadero{
         caracter resultado [24] = "> Es_verdadero";
           
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno leftRotate(node);
        }
        fin-si

        // Left Right Case
        si (balance > 1 && key > node.left.key) Es_verdadero{
        caracter resultado [24] = "> Es_verdadero";
        concatenar(resultado, convertirACadena(cont));
            
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
                cont++;
            retorno rightRotate(node);
        }
        fin-si

        // Right Left Case
        si (balance < -1 && key < node.right.key) Es_verdadero{
            caracter resultado [24] = "> Es_verdadero";
            concatenar(resultado, convertirACadena(cont));
            imprimir(resultado);
            cont++;
            node.right = rightRotate(node.right);
            retorno leftRotate(node);
        }
        fin-si

        retorno node;
    }

    vacio postOrder(Node node) {
        //esto no va asi
        //va asi
        //si (node != {'\0'}) Es_verdadero{
        si (node != nada) Es_verdadero{
            postOrder(node.left);
            caracter resultado [40] = convertirACadena(node.key);
            concatenar(resultado, " ");
            imprimir(resultado);
            postOrder(node.right);
            
            
        }
        Fin-SI
    }
}
