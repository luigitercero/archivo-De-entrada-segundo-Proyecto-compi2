

publico clase Inicio {

    principal(){
        Operaciones op = new Operaciones();
        op.aritmeticas_basicas();
        op.aritmeticas_avanzadas();
        op.operaciones_relacionales_basicas();
        op.operaciones_relacionales_avanzadas();
        op.operaciones_logicas_basicas();
        op.operaciones_logicas_avanzadas();
        op.operaciones_conjuntas();
        
        Funciones fun = new Funciones();
        fun.evaluar_numero();
        fun.evaluar_caracter();
        fun.saludo();
        fun.ciclo_doble_cond();
        fun.ciclo_vida();
        Entero res_no = fun.fibonacci_no_recursivo(10);
        caracter sal[40] = "Salida Fibonacci No Recursivo ";
        concatenar(sal, res_no);
        imprimir(sal);
        Entero res = fun.fibonacci_recursivo(8);
        imprimir("14) fibonacci_recursivo");
        sal = "Salida Fibonacci Recursivo ";
        concatenar(sal, res);
        imprimir(sal);
        
        fun.pedir_num();
    }
    
}






publico clase Funciones {
    
    privado vacio eval_num(Entero param){
        evaluar_si (param) {
            Es_igual_a 0:
                imprimir("Cero");
                romper;
            Es_igual_a 1:
                imprimir("Uno");
                romper;
            Es_igual_a (2*2)/2:
                imprimir("Dos");
                romper;
            Es_igual_a 3:
                imprimir("Tres");
                romper;
            Es_igual_a 4:
                imprimir("Cuatro");
                romper;
            default:
                imprimir("Salida incorrecta!!");
        }
    }
    
    publico vacio evaluar_numero(){
        imprimir("8) Evaluar Numero");
        Repetir_contando (variable: i; desde: 0; hasta: 5){
            eval_num(i);
        }
    }
    
    privado vacio eval_car(char param){
        evaluar_si (param) {
            Es_igual_a 'a':
                imprimir("A");
                romper;
            Es_igual_a 'b':
                imprimir("B");
                romper;
            Es_igual_a 'c':
                imprimir("C");
                romper;
            Es_igual_a 'd':
                imprimir("D");
                romper;
            Es_igual_a 'e':
                imprimir("E");
                romper;
            default:
                imprimir("Salida incorrecta!!");
        }
    }
    
    publico vacio evaluar_caracter(){
        imprimir("9) Evaluar Caracter");
        eval_car('e');
        eval_car('d');
        eval_car('c');
        eval_car('b');
        eval_car('a');
    }
    
    publico vacio saludo(){
        imprimir("10) Saludo");
        Entero conta = 0;
        do{
            switch(conta){
                Es_igual_a 0: 
                    imprimir("Esta");
                    romper;
                Es_igual_a 1: 
                    imprimir(" salida");
                    romper;
                Es_igual_a 2:
                    imprimir(" es");
                    romper;
                Es_igual_a 3: 
                    imprimir(" CORRECTA!!");
                    romper;
                default:
                    imprimir("Salida incorrecta!!!");
            }
            conta++;
        }while(conta < 4);
    }

    publico vacio ciclo_doble_cond(){
        imprimir("11) ciclo_doble_cond");
        booleano var1 =true;
        booleano var2 =false;
        booleano res = false;
        si ((var1==var2 && var1!=var2 && true==var1) || var1==var2)
            es_verdadero{
                res = false;
            }
            es_falso{
                si (((var1==var2 && var1) || var1) || var1==var2)
                    es_verdadero{
                        res = true;
                    }
                    es_falso{
                        res = false;
                    }
                fin-si
            }
        fin-si

        booleano var3 = false;
        Entero conta = 0;
        Ciclo_doble_condicion(res, var3){
            var3 = true;
            conta++;
            si(conta == 10)
                es_verdadero{
                    var3=false;
                }  
            fin-si
        }
        caracter sal[20] = "Resultado: ";
        concatenar(sal, conta);
        imprimir(sal);
    }
    

    publico vacio ciclo_vida(){
        imprimir("12) ciclo_vida");
        Persona Carlos = new Persona(16, "Carlos", "Martinez", 'M');
        Persona Josefina = new Persona(15, "Josefina", "Tobar", 'F');
        Persona Carlitos = new Persona();
        Entero contador = 0;
        Repetir_Mientras(contador < 4){
            contador++;
            si(contador ==4)
                es_verdadero{
                    Carlitos = Carlos.reproducir(Josefina, "Carlitos");
                    Josefina.matrimonio(Carlos);
                    caracter text[40] = "Nombre Hijo: ";
                    concatenar(text, Carlitos.nombre);
                    concatenar(text, Carlitos.apellido);
                    imprimir(text);
                    text = "Nombre esposa: ";
                    concatenar(text, Josefina.nombre);
                    concatenar(text, Josefina.apellido);
                    imprimir(text);
                }
            fin-si
        }
    }
    
    publico Entero fibonacci_no_recursivo(Entero n) {
        imprimir("13) fibonacci_no_recursivo");
        Entero actual, ant1, ant2, i;
        ant1 = 1;
        ant2 = 1;
        actual = 0;
        si((n == 0)||(n == 1))
            es_verdadero{
                actual = 1;
            }
            es_falso{
                Repetir_contando (variable: i; desde: 2; hasta: n){
                    actual = ant1 + ant2;
                    ant2 = ant1;
                    ant1 = actual;
                }
            }
        fin-si
        return actual;
    }
    
    Entero fibonacci_recursivo(Entero n){
        si (n==0)
            es_verdadero{
                return 0;
            }es_falso
                si (n==1)
                    es_verdadero{
                        return 1;
                    } 
                    es_falso{
                        si(n>1)
                            es_verdadero{
                                return fibonacci_recursivo(n-1) + fibonacci_recursivo(n-2);
                            }
                        fin-si
                    }
                fin-si 
            }
        return -1;
    }
    
    publico vacio pedir_num(){
        imprimir("15) Pedir num");
        Entero num = 0;
        hacer 
        {
            Leer_Teclado ("Ingrese numero diferente de 5", num); 
        } mientras (!(num == 5));
    }
}
