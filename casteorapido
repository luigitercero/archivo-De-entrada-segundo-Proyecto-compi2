 
clase Casteo {
    principal () {
        caracter valores[50];
        valores = "el resultado es 1236894.5787 y me dio : ";
        concatenar(valores, convertirAcadena(1236894.5787));
        imprimir(valores);
        

    }

    
        publico  caracter [] convertirAcadena (decimal a) {
        entero divisor = 0;
        entero residuo = 0;
        entero primero = 1;
        entero residuo2 = 0;
        caracter numero[16];
        caracter double[16];
        entero poss = 0;
         entero dividendo = 1 ;
        repetir_mientras (a > dividendo) {
            dividendo = dividendo *10;
        }
        si (dividendo>a) {
            es_verdadero {
             dividendo = dividendo /10;
             }
            es_falso {
            }
        }
        
        
        repetir_mientras (1<dividendo) {
            repetir_mientras (a >=dividendo) {
               divisor++;
                a = a - dividendo;
            }
            
            si( divisor > 10 ) {
                es_verdadero {
                  dividendo = dividendo /10;
                } 
                es_falso {
                	dividendo = dividendo /10;
                    numero[poss] = divisor + 48;
                    poss++;
                    divisor = 0;
                }
            
            }
        }
      divisor = 0;
        repetir_mientras (a >= 1) {
            divisor++;
            a = a - dividendo;
        }
            numero[poss] = divisor + 48;
            poss++;
            numero[poss] = '.';
            poss++;
           imprimir(numero);
           imprimir(poss);
           poss =0;
       repetir_mientras (a >0) {
           divisor =0;
          a = a*10;
       		repetir_mientras (a >= 1) {
           	 	divisor++;
            	a = a - 1;
        	}
            double[poss] = divisor + 48;
            poss++;
        }
        imprimir(double);
            
            
        
        entero countCarac = poss;
        entero c = 0;
        entero temp = countCarac;
        caracter salida[16];
        repetir_mientras (c < countCarac) {
         salida[c] = numero[temp - 1];
         temp--;
         c++;
        }
        retorno salida;
    }
    

    
}
