clase miClase{
	Publico entero atributo1;
	protegido entero atributo3;
	privado entero atributo2;
	//publico caracter atributoCadena = "cadenaInicio";
	publico entero b1 = 1+2;
	publico caracter b2 = 'a'+'b';
	publico entero b3 = true + true;
	publico decimal b4 = 1.0+1.0;
    publico entero basicas = 7+8-9*10/11%12^13;
    publico decimal negativo = 10*-11 +4;
    booleano m = 1>2||3>4 ||5>6 ||7>8;
    booleano j = 1>5 && 4>6 && 4>6 && 4>6;
    booleano r = 1>2 ?? 3>4 ?? 5>6 ?? 7>8;
    booleano a = true;
    booleano b = !false;
    booleano c = false;
    booleano d = 5<4||  5 >4;
    booleano e = true && false;
    booleano f = 5>4 ?? 7<5;
   
    
	publico entero ss(entero parametro){
       // entero basicas = 1+2-3*4/5%6^8 / 0.25;
       
    entero arreglo[3][4 ][10] = {{1.5,1.56,15.5},{1.5,1.56,15.5},{1.5,1.56,15.5},{1.5,1.56,15.5}};
		entero a  = arreglo[2][1][4];
 Objeto objeto [2][2] = {{nuevo Objeto(), nuevo Objeto()},{nuevo Objeto(), nuevo Objeto()}};
	}

}


clase curso hereda_de miClase{
	publico entero atributo1;
	protegido entero atributo3;
	privado entero atributo2;
	//publico caracter atributoCadena = "cadenaInicio";

	publico vacio metodo(entero parametro){
		este.atributo1 = parametro;
		entero prueba = 15+46;

	}
	
	privado vacio metodo(entero parametro,entero parametro,entero parametro){
		//este.atributo1 = parametro;
		retorno;

	}
	publico entero suma(entero nu1, entero num2){

		retorno operador1+operad2;
	}
	
	publico vacio metodo(miClase probando ){
     metodo (nuevo miClase());
	}


}


clase perosna hereda_de miClase{
	publico entero atributo1;
	protegido entero atributo3;
	privado entero atributo2;
	//publico caracter atributoCadena = "cadenaInicio";
	publico curso cur;


	publico vacio metodo(entero parametro){
		este.atributo1 = parametro;
		//entero prueba = entero(1,2);
		//cur =  a;
		//cur = nuevo cur(15);
		Caracter perosna [20] =nada;
		
		crearPuntero(int,id);
		usuario->edad = 25;
		Lista identifi = nuevo Lista(entero);
	}
	@sobreescribir
	privado vacio metodo(entero parametro,entero parametro,entero parametro){
		este.atributo1 = parametro;
		retorno;

	}
	publico entero suma(entero nu1, entero num2){

		retorno operador1+operad2;
	}

}

clase Nodo{
    privado caracter nombre;
    privado Lista childNode;
     Nodo(caracter nombre){
        este.nombre = nombre;
        este. childNode = nuevo Lista (Nodo);
    }
    
    Nodo getNombre(){
        retorno este.nombre;
    }
}

clase Arbol{
    publico Nodo raiz;
    
    Arbol(Nodo raiz){
        este.raiz = raiz;
       
    }
    publico vacio agregarHijo(Nodo hijo){
        this.raiz.add(hijo);
    }
    
    publico vacio recorrer(Nodo raiz, caracter espacio){
        imprimir(raiz.getNombre());
        Nodo hijo = raiz.childNode;
        entero n = 0 ;
        repetir_mientras(hijo != nada){
            si(hijo.childNode(n) != nada){
                es_verdadero{
                    concatenar(espacio, " ");
                    recorrer(hijo.childNode(n),espacio);
                }es_falso{
                 romper;
                }
            fin-si
        }
    }
    
}
