
publico clase Operaciones {
    
    publico vacio iniciar_lista(entero v_size , entero datos){
        
        Lista mi_lista = nuevo Lista(Obj_contenedor);
        
        Si(datos < v_size)
            es_verdadero{
            
            entero cont = datos;
            entero eleccion = 1;
            Repetir_Mientras(cont <= v_size ){
                Obj_contenedor nuevo1 = nuevo Obj_contenedor();
                nuevo1.id = cont;
                nuevo1.agregarDecimal(cont, datos, eleccion);
                mi_lista.insertar(nuevo1);
                Si(eleccion == 5)
                        es_verdadero{
                        eleccion = 1;
                    }
                    Es_falso{
                        eleccion++;
                    }
                fin-si
                cont ++;
            }
            
            Obj_contenedor Aux;
            entero indice = 0;
            Repetir_Mientras(indice <= (v_size - datos) ){
                Aux = mi_lista.obtener(indice);
                Aux.imprimirContenido();
                indice++;
            }
            
        }
        Es_falso{
            
            entero cont = 0;
            entero eleccion = 1;
            Repetir_Mientras(cont <= v_size ){
                Obj_contenedor nuevo1 = nuevo Obj_contenedor();
                nuevo1.id = cont;
                nuevo1.agregarDecimal(cont, datos, eleccion);
                mi_lista.insertar(nuevo1);
                Si(eleccion == 5)
                    es_verdadero{
                        eleccion = 1;
                    }
                    Es_falso{
                        eleccion++;
                    }
                fin-si
                cont ++;
            }
            
            Obj_contenedor Aux;
            entero indice = 0;
            Repetir_Mientras(indice <= v_size ){
                Aux = mi_lista.obtener(indice);
                Aux.imprimirContenido();
                indice++;
            }
            
        }
        fin-si
        
    }
    
    publico vacio iniciar_vectores(entero v_size , entero datos){
        entero vector_1 [ v_size ] ;

        
        Si(datos < v_size)
        es_verdadero{
            
            Repetir_contando(variable: i; desde:0 ; hasta: v_size){
                vector_1 [ i ]  = (datos * i) + v_size;
            }
            
        }
        Es_falso{
            entero i = 0;
            Repetir_Mientras(i < v_size ){
                vector_1 [ i ]  = (datos + i ) + v_size;
                i++;
            }
        }
        fin-si
        
        Repetir_contando(variable: j ; desde:0; hasta: vector_1.tamanio){
            entero v = vector_1 [ j ];
            imprimir(v);
        }
        
    }
    
    publico vacio iniciar_pila(entero v_size , entero datos , entero vaciar)  {

        Pila mi_pila = nuevo Pila(entero);       
        
        entero i = 0;
        entero val;
        imprimir("APILAR");
        Repetir_Mientras (i < v_size){
                val = datos * i;
                mi_pila.Apilar(val);
                imprimir(convertirACadena(val));
                i++;
        }
        
        entero valor;
        
        i = 0;
        
        imprimir("DESAPILAR");
        Si(vaciar == 0)
        es_verdadero{
            Repetir_Mientras (i < v_size){
                   valor = mi_pila.Desapilar();
                   imprimir(convertirACadena(valor));
                   i++;
            }
        }
        Es_falso{
            Repetir_Mientras (i <= v_size){
                   imprimir(convertirACadena(mi_pila.Desapilar()));
                   mi_pila.Desapilar();
                   i++;
            }
        }   
        fin-si
    }
    
    publico vacio iniciar_cola(entero v_size , entero datos , entero vaciar)  {

        Cola mi_Cola = nuevo Cola(entero);       
        
        entero i = 0;
        entero val;
        imprimir("ENCOLAR");
        Repetir_Mientras (i < v_size){
            val = datos * i;
            mi_Cola.Encolar(datos * i);
            imprimir(convertirACadena(val));    
            i++;
        }
        
        entero valor;
        
        i = 0;
        imprimir("DESENCOLAR");
        Si(vaciar == 0)
        es_verdadero{
            Repetir_Mientras (i < v_size){
                   valor = mi_Cola.Desencolar();
                   imprimir(convertirACadena(valor));
                   i++;
            }
        }
        Es_falso{
            Repetir_Mientras (i <= v_size){
                   imprimir(convertirACadena(mi_Cola.Desencolar()));
                   //mi_pila.Desencolar();
                   i++;
            }
        }
        fin-si
    }
    
    publico vacio iniciar_matriz(entero x , entero y , entero valor){
        
        entero  mi_matriz [ x ]  [ y ];
        
		entero i;
		entero j;
		
        Repetir_contando(variable: i ; desde:0 ; hasta: x){
            Repetir_contando(variable: j ; desde: 0; hasta: y){
                mi_matriz [ i ]  [ j ]  = valor;
                valor++;
            }
        }
        
        Repetir_contando(variable: i ; desde: 0;  hasta:x){
            Repetir_contando(variable: j; desde : 0; hasta: y){
                imprimir("-------------------------------------");
                imprimir(convertirACadena(i));
                imprimir(convertirACadena(j));
                imprimir(convertirACadena(mi_matriz [ i ]  [ j ] ));
                imprimir("-------------------------------------");
            }
        }
        
    }
    
    publico vacio vector_a_cola(entero v_size , entero datos , entero vaciar){
        entero vector_1 [ v_size ] ;
        Cola mi_Cola = nuevo Cola(entero);    
        
        Si(datos < v_size)
        es_verdadero{
            
            Repetir_contando(Variable: i; desde:0;hasta:v_size-1){
                vector_1 [ i ]  = (datos * i) + v_size;
            }
            
        }
        Es_falso{
            entero i = 0;
            Repetir_Mientras(i < v_size ){
                vector_1 [ i ]  = (datos + i ) + v_size;
                i++;
            }
        }
        fin-si

		 Repetir_contando(variable : j ; desde : 0; hasta: vector_1.tamanio){
            mi_Cola.Encolar(vector_1 [ j ] );
        }
        
        imprimir("v_size Vector");
        imprimir(convertirACadena(vector_1.tamanio));
        
        entero valor;
        entero i = 0;
        imprimir("DESENCOLAR");
        Si(vaciar == 0)
        es_verdadero{
            Repetir_Mientras (i < vector_1.tamanio){
                   valor = mi_Cola.Desencolar();
                   imprimir(convertirACadena(valor));
                   i++;
            }
        }
        Es_falso{
            Repetir_Mientras (i <= vector_1.tamanio){
                   imprimir(convertirACadena(mi_Cola.Desencolar()));
                   //mi_pila.peek();
                   i++;
            }
        }
        fin-si
        
    }
    
    publico vacio vector_a_lista(entero v_size , entero datos){
        entero vector_1 [  v_size ] ;

       Lista mi_lista = nuevo Lista(entero);
        
        Si(datos < v_size)
        es_verdadero{
            
            Repetir_contando(variable: i; desde: 0; hasta:  v_size ){
                vector_1 [ i ]  = (datos * i) + v_size;
            }
            
        }
        Es_falso{
            entero i = 0;
            Repetir_Mientras(i < v_size ){
                vector_1 [ i ]  = (datos + i ) + v_size;
                i++;
            }
        }
        fin-si
        Repetir_contando(variable: j ; desde: 0 ; hasta: vector_1.tamanio){
            mi_lista.insertar(vector_1 [ j ] );
        }
        
        imprimir("v_size Vector");
        imprimir(convertirACadena(vector_1.tamanio));
        
        imprimir("v_size Lista");
        imprimir(convertirACadena(v_size));
        
        entero Aux;
        entero indice = 0;
        Repetir_Mientras(indice < vector_1.tamanio ){
            Aux = mi_lista.obtener(indice);
            imprimir(convertirACadena(Aux));
            indice++;
        }
        
    }
        
    publico vacio vector_a_pila(entero v_size , entero datos , entero vaciar){
        entero vector_1 [ v_size ] ;
        
        Pila mi_pila = nuevo Pila(entero);   
        
        Si(datos < v_size)
        es_verdadero{
            
            Repetir_contando(variable: i ; desde: 0; hasta:  v_size ){
                vector_1 [ i ]  = (datos * i) + v_size;
            }
            
        }
        Es_falso{
            entero i = 0;
            Repetir_Mientras(i < v_size ){
                vector_1 [ i ]  = (datos + i ) + v_size;
                i++;
            }
        }
        fin-si
        Repetir_contando(variable: j; desde: 0 ; hasta: vector_1.tamanio){
            mi_pila.Apilar(vector_1 [ j ] );
        }
        
        imprimir("v_size Vector");
        imprimir(convertirACadena(vector_1.tamanio));
        
        entero valor;
        entero i = 0;
        imprimir("DESAPILAR");
        Si(vaciar == 0)
        es_verdadero{
            Repetir_Mientras (i < vector_1.tamanio){
                   valor = mi_pila.Desapilar();
                   imprimir(convertirACadena(valor));
                   i++;
            }
        }
        Es_falso{
            Repetir_Mientras (i <= vector_1.tamanio){
                   imprimir(convertirACadena(mi_pila.Desapilar()));
                   //mi_pila.Desapilar();
                   i++;
            }
        }
        fin-si
    }
    
    publico vacio matriz_a_vector(entero x , entero y , entero valor){
        
        entero  mi_matriz [ x ]  [ y ] ;
        
        Repetir_contando(variable: i ; desde: 0; hasta: x){
            Repetir_contando(variable: j;  desde: 0; hasta: y){
                mi_matriz [ i ]  [ j ]  = valor;
                valor++;
            }
        }
        
        
        
        entero vector [ x*y ] ;
        entero pos;
        
        Repetir_contando(variable: i; desde: 0; hasta: x){
            Repetir_contando(variable : j ; desde: 0; hasta: y){
                pos = (x*i) + j;
                vector [ pos ]  = mi_matriz [ i ]  [ j ] ;
                imprimir("-------------------------------------");
                imprimir("Matriz:");
                imprimir(convertirACadena(i));
                imprimir(convertirACadena(j));
                imprimir(convertirACadena(mi_matriz [ i ]  [ j ] ));
                imprimir("Vector:");
                imprimir(convertirACadena(pos));
                imprimir(convertirACadena(vector [ pos ] ));
                imprimir("-------------------------------------");
            }
        }
        
    }
    
    publico vacio vector_compara_lista(entero v_sizeVec , entero datosVec , entero v_sizeList , entero datosList){
        entero mi_vector [ v_sizeVec ] ;

        Lista mi_lista = nuevo Lista(entero);
        
        entero i = 0;
        Repetir_Mientras(i < v_sizeVec ){
            mi_vector [ i ]  = (datosVec * i ) + v_sizeVec;
            i++;
        }
        
        entero j = 0;
        
        Repetir_Mientras(i < v_sizeList ){
            mi_lista.insertar((datosList * j ) + v_sizeList);
            i++;
        }
        
        Si(mi_vector.tamanio == v_sizeList)
        es_verdadero{
            entero valor = 0;
            entero ValAUX;
            Repetir_Mientras(valor < v_sizeList ){
                ValAUX = mi_lista.obtener(valor);
                Si(ValAUX != mi_vector [ valor ] )
                es_verdadero{
                    imprimir("Son dSierentes");
                    romper;
                }
                fin-si
                valor++;
            }
        }Es_falso{
            imprimir("Son dSierentes");
        }
        fin-si
        imprimir("Son Iguales");
        
    }
    
    publico vacio copiar_lista_matriz(entero x , entero y , entero valor){
    
        entero  mi_matriz [ x ]  [ y ] ;
        Lista mi_lista = nuevo Lista(entero);
        
         Repetir_contando(variable: i ; desde: 0; hasta: x){
            Repetir_contando(variable: j; desde: 0; hasta: y ){
                mi_lista.insertar(valor);
                valor++;
            }
        }
        
        entero pos;
        
        Repetir_contando(variable: i ; desde: 0; hasta: x){
            Repetir_contando(variable: j; desde: 0; hasta: y ){
               pos = (x*i) + j;
               mi_matriz [ i ]  [ j ]  = mi_lista.obtener(pos);
            }
        }
        
        entero aux;
        
        Repetir_contando(variable: i; desde: 0; hasta: x ){
            Repetir_contando(variable: j; desde:0 ; hasta: y){
                
                pos = (x*i) + j;
                aux = mi_lista.obtener(pos);
                imprimir("-------------------------------------");
                imprimir("Lista:");
                imprimir(convertirACadena(pos));
                imprimir(convertirACadena(aux));
                imprimir("Matriz:");
                imprimir(convertirACadena(i));
                imprimir(convertirACadena(j));
                imprimir(convertirACadena(mi_matriz [ i ]  [ j ] ));
                imprimir("-------------------------------------");
            }
        }
    }
    
    
    publico vacio comparar_matriz_pila(entero x , entero y , entero valor){
        entero  mi_matriz  [ x ]  [ y ] ;
        
        Repetir_contando(variable: i ; desde: 0; hasta: x){
            Repetir_contando(variable : j; desde: 0; hasta: y){
                mi_matriz [ i ]  [ j ]  = valor;
                valor++;
            }
        }
        
        Repetir_contando(variable: i ; desde: 0; hasta: x){
            Repetir_contando(variable : j; desde: 0; hasta: y){
                imprimir("-------------------------------------");
                imprimir(convertirACadena(i));
                imprimir(convertirACadena(j));
                imprimir(convertirACadena(mi_matriz [ i ]  [ j ] ));
                imprimir("-------------------------------------");
            }
        }
    }
       
}

