importar("Node.gcc")

/**
 *
 * @author Calificacion compiladores
 */

publico clase Tree {
    
    Node root;
    // A utility function to get height of the tree
    entero height(Node N) {
        si (N == nada) Es_verdadero{
            retorno 0;
        }
        Fin-Si
        retorno N.height;
    }

    // A utility function to get maximum of two integers
    entero max(entero a, entero b) {
        si(a > b) es_verdadero {
            retorno a;
        }
        es_falso {
            retorno b;
        }
        fin-si
        //retorno (a > b) ? a : b;
    }
    // A utility function to right rotate subtree rooted with y
    // See the diagram given above.
    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;
        // Perform rotation
        x.right = y;
        y.left = T2;
        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;
        // retorno new root
        retorno x;
    }
    // A utility function to left rotate subtree rooted with x
    // See the diagram given above.
    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;
        // Perform rotation
        y.left = x;
        x.right = T2;
        //  Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;
        // retorno new root
        retorno y;
    }

    // Get Balance factor of node N
    entero getBalance(Node N) {
        si (N == nada) Es_verdadero {
            retorno 0;
        }
        fin-si
        retorno height(N.left) - height(N.right);
    }

    Node insert(Node node, entero key) {
        si (node == nada) Es_verdadero {
            retorno (nuevo Node(key));
        }
        fin-si
        si (key < node.key) Es_verdadero{
            node.left = insert(node.left, key);
        } 
        es_falso {
            si (key > node.key) Es_verdadero{
                node.right = insert(node.right, key);
            } 
            es_falso // Duplicate keys not allowed
            {
                retorno node;
            }
            fin-si
        }
        fin-si
        // 2. Update height of this ancestor node 
        node.height = 1 + max(height(node.left),
                height(node.right));

        entero balance = getBalance(node);

        // si this node becomes unbalanced, then there
        // are 4 cases Left Left Case
        si (node.left != nada) es_verdadero {
            si (balance > 1 && key < node.left.key) Es_verdadero{
                retorno rightRotate(node);
            }
            fin-si
        }
        fin-si

        // Right Right Case
        si (node.right != nada) es_verdadero {
            si (balance < -1 && key > node.right.key) Es_verdadero{
                retorno leftRotate(node);
            }
            fin-si
        }
        fin-si

        // Left Right Case
        si (node.left != {'\0'}) es_verdadero {
            si (balance > 1 && key > node.left.key) Es_verdadero{
                node.left = leftRotate(node.left);
                retorno rightRotate(node);
            }
            fin-si
        }
        fin-si
        

        // Right Left Case
        si (node.right != {"\0"}) es_verdadero {
            si (balance < -1 && key < node.right.key) Es_verdadero{
                node.right = rightRotate(node.right);
                retorno leftRotate(node);
            }
            fin-si
        }
        fin-si

        retorno node;
    }

    void preOrder(Node node) {
        si (node != {"\0"}) Es_verdadero{
            imprimir(concatenar(convertirACadena(node.key), " "));
            preOrder(node.left);
            preOrder(node.right);
        }
        Fin-SI
    }

    void postOrder(Node node) {
        si (node != {'\0'}) Es_verdadero{
            postOrder(node.left);
            postOrder(node.right);
            imprimir(concatenar(convertirACadena(node.key), " "));
        }
        Fin-SI
    }
}
